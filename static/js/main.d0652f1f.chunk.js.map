{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","api.ts","App.tsx","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","store/loading.ts","store/currentTodo.ts","store/index.ts","index.tsx"],"names":["TodoFilter","query","onReset","onApplyQuery","onHandleInputQuery","onHandleFilterType","className","onChange","event","target","value","type","placeholder","style","pointerEvents","onClick","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","TodoList","todos","todoSelectedId","onTodoSelect","onMixTodos","map","todo","classNames","id","completed","title","Loader","TodoModal","onClose","useState","user","setUser","isUserLoaded","setIsUserLoaded","useEffect","userId","currentUser","href","email","name","initialState","isLoaded","actionsLoading","selectorsLoading","state","App","setTodos","todoSelected","setTodoSelected","visibleTodos","setVisibleTodos","setQuery","appliedQuery","setAppliedQuery","ALL","typeOfSelection","setTypeOfSelection","dispatch","useDispatch","useSelector","finally","ACTIVE","filter","COMPLETED","lowQuery","toLowerCase","currentTodos","includes","applyQuery","useCallback","debounce","inputQuery","selectType","selectedTodo","todosVisible","sort","Math","random","userLoading","RootReducer","combineReducers","action","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0652f1f.chunk.js","sourcesContent":["/* eslint-disable no-debugger */\n/* eslint-disable no-console */\ntype Props = {\n  query: string,\n  onReset: () => void,\n  onApplyQuery: (query1: string) => void,\n  onHandleInputQuery: (inputQuery: string) => void,\n  onHandleFilterType: (selectType: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onReset,\n  onApplyQuery,\n  onHandleInputQuery,\n  onHandleFilterType,\n}) => {\n  return (\n    <>\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              onChange={event => onHandleFilterType(event.target.value)}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={event => {\n              onHandleInputQuery(event.target.value);\n              onApplyQuery(event.target.value);\n            }}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {query && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => {\n                  onReset();\n                  onHandleInputQuery('');\n                }}\n              />\n            )}\n          </span>\n        </p>\n      </form>\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport debounce from 'lodash.debounce';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { actionsLoading, selectorsLoading } from './store/loading';\nimport { Loader } from './components/Loader';\n\nenum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoSelected, setTodoSelected] = useState<Todo | null>(null);\n  // const [isLoaded, setIsLoaded] = useState(false);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [typeOfSelection, setTypeOfSelection] = useState<string>(FilterType.ALL);\n  const dispatch = useDispatch();\n  const isLoaded = useSelector(selectorsLoading.getLoaded);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => dispatch(actionsLoading.finishLoading()));\n  }, []);\n\n  useEffect(() => {\n    switch (typeOfSelection) {\n      case FilterType.ALL:\n        setVisibleTodos(todos);\n        break;\n\n      case FilterType.ACTIVE:\n        setVisibleTodos(todos\n          .filter(todo => todo.completed === false));\n        break;\n\n      case FilterType.COMPLETED:\n        setVisibleTodos(todos.filter(todo => todo.completed === true));\n        break;\n\n      default:\n        break;\n    }\n\n    const lowQuery = appliedQuery.toLowerCase();\n\n    setVisibleTodos(currentTodos => currentTodos\n      .filter(todo => todo.title.toLowerCase().includes(lowQuery)));\n  }, [typeOfSelection, appliedQuery, todos]);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const handleInputQuery = (inputQuery: string) => {\n    setQuery(inputQuery);\n  };\n\n  const handleFilterType = (selectType: string) => {\n    setTypeOfSelection(selectType);\n  };\n\n  const handleTodoSelect = (selectedTodo: Todo | null) => {\n    setTodoSelected(selectedTodo);\n  };\n\n  const mixTodos = (todosVisible: Todo[]) => {\n    setVisibleTodos([...todosVisible].sort(() => Math.random() - 0.5));\n  };\n\n  const reset = () => setQuery('');\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onReset={reset}\n                onApplyQuery={applyQuery}\n                onHandleInputQuery={handleInputQuery}\n                onHandleFilterType={handleFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    todoSelectedId={todoSelected?.id || 0}\n                    onTodoSelect={handleTodoSelect}\n                    onMixTodos={mixTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {todoSelected && (\n        <TodoModal\n          todo={todoSelected}\n          onClose={setTodoSelected}\n        />\n      )}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  todoSelectedId: number,\n  onTodoSelect: (selectedTodo: Todo | null) => void,\n  onMixTodos: (todos: Todo[]) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  todoSelectedId,\n  onTodoSelect,\n  onMixTodos,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => onMixTodos(todos)}\n            >\n              Mix Todos\n            </button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              {\n                'has-background-info-light': todo.id === todoSelectedId,\n              },\n            )}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {todoSelectedId === todo.id ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onTodoSelect(null);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              )\n                : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      onTodoSelect(todo);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo,\n  onClose: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n\n  useEffect(() => {\n    getUser(todo.userId).then(currentUser => {\n      setUser(currentUser);\n      setIsUserLoaded(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isUserLoaded\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => {\n                  setIsUserLoaded(false);\n                  onClose(null);\n                }}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\nexport type LoadingAction = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\nexport type LoadingState = {\n  isLoaded: boolean;\n};\n\nconst initialState: LoadingState = {\n  isLoaded: false,\n};\n\nexport const loadingReducer = (\n  state = initialState, action: LoadingAction,\n): LoadingState => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return {\n        isLoaded: false,\n      };\n\n    case 'FINISH_LOADING':\n      return {\n        isLoaded: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actionsLoading = {\n  startLoading: (): StartLoadingAction => ({\n    type: 'START_LOADING',\n  }),\n\n  finishLoading: (): FinishLoadingAction => ({\n    type: 'FINISH_LOADING',\n  }),\n};\n\nexport const selectorsLoading = {\n  getLoaded: (state: LoadingState) => state.isLoaded,\n};\n","import { Todo } from '../types/Todo';\n\ntype StartUserLoadingAction = {\n  type: 'START_USER_LOADING',\n};\n\ntype FinishUserLoadingAction = {\n  type: 'FINISH_USER_LOADING',\n};\n\ntype SetTodoAction = {\n  type: 'SET_TODO',\n  payload: Todo,\n};\n\ntype ClearTodoAction = {\n  type: 'CLEAR_TODO',\n  payload: null,\n};\n\nexport type CurrentTodoAction = (\n  StartUserLoadingAction | FinishUserLoadingAction\n  | SetTodoAction | ClearTodoAction\n);\n\nexport type CurrentTodoState = {\n  userLoading: boolean;\n  todo: Todo | null;\n};\n\nconst initialState: CurrentTodoState = {\n  userLoading: false,\n  todo: null,\n};\n\nexport const currentTodoReducer = (\n  state = initialState, action: CurrentTodoAction,\n): CurrentTodoState => {\n  switch (action.type) {\n    case 'START_USER_LOADING':\n      return {\n        ...state,\n        userLoading: true,\n      };\n\n    case 'FINISH_USER_LOADING':\n      return {\n        ...state,\n        userLoading: false,\n      };\n\n    case 'SET_TODO':\n      return {\n        ...state,\n        todo: action.payload,\n      };\n\n    case 'CLEAR_TODO':\n      return {\n        ...state,\n        todo: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actionsCurrentTodo = {\n  startUserLoading: (): StartUserLoadingAction => ({\n    type: 'START_USER_LOADING',\n  }),\n\n  finishLoading: (): FinishUserLoadingAction => ({\n    type: 'FINISH_USER_LOADING',\n  }),\n\n  setTodo: (todo: Todo): SetTodoAction => ({\n    type: 'SET_TODO',\n    payload: todo,\n  }),\n\n  clearTodo: (): ClearTodoAction => ({\n    type: 'CLEAR_TODO',\n    payload: null,\n  }),\n};\n\nexport const selectorsCurrentTodo = {\n  userLoading: (state: CurrentTodoState) => state.userLoading,\n  todoSetting: (state: CurrentTodoState) => state.todo,\n  todoClearing: (state: CurrentTodoState) => state.todo,\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { currentTodoReducer } from './currentTodo';\nimport { loadingReducer } from './loading';\n\nexport const RootReducer = combineReducers({\n  isLoaded: loadingReducer,\n  userLoading: currentTodoReducer,\n});\n\nexport const store = createStore(\n  RootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof RootReducer>;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { App } from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}