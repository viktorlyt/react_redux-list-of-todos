{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","features/selectedTodo.ts","store/hooks.ts","components/TodoList/TodoList.tsx","api.ts","App.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","features/todos.ts","store/index.ts","index.tsx"],"names":["TodoFilter","query","onReset","onApplyQuery","onHandleInputQuery","onHandleFilterType","className","onChange","event","target","value","type","placeholder","style","pointerEvents","onClick","selectedTodoSlice","createSlice","name","initialState","reducers","setTodo","_","action","payload","clearTodo","actions","useAppSelector","useSelector","TodoList","todos","onMixTodos","dispatch","useDispatch","selelctedTodo","state","selectedTodo","selectTodo","todo","map","classNames","id","completed","title","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","Loader","TodoModal","onClose","useState","user","setUser","isUserLoaded","setIsUserLoaded","useEffect","userId","currentUser","href","email","loaded","items","todosActions","todosReducer","store","configureStore","reducer","loadTodos","todosFromServer","finally","App","todoSelected","visibleTodos","setVisibleTodos","setQuery","appliedQuery","setAppliedQuery","ALL","typeOfSelection","setTypeOfSelection","ACTIVE","filter","COMPLETED","lowQuery","toLowerCase","currentTodos","includes","applyQuery","useCallback","debounce","inputQuery","selectType","todosVisible","sort","Math","random","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42f8ed2f.chunk.js","sourcesContent":["/* eslint-disable no-debugger */\n/* eslint-disable no-console */\ntype Props = {\n  query: string,\n  onReset: () => void,\n  onApplyQuery: (query1: string) => void,\n  onHandleInputQuery: (inputQuery: string) => void,\n  onHandleFilterType: (selectType: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onReset,\n  onApplyQuery,\n  onHandleInputQuery,\n  onHandleFilterType,\n}) => {\n  return (\n    <>\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              onChange={event => onHandleFilterType(event.target.value)}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={event => {\n              onHandleInputQuery(event.target.value);\n              onApplyQuery(event.target.value);\n            }}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {query && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => {\n                  onReset();\n                  onHandleInputQuery('');\n                }}\n              />\n            )}\n          </span>\n        </p>\n      </form>\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Todo } from '../types/Todo';\n\ntype SelectedTodoState = Todo | null;\n\nconst selectedTodoSlice = createSlice({\n  name: 'selectedTodo',\n  initialState: null as SelectedTodoState,\n  reducers: {\n    setTodo: (_: SelectedTodoState, action: PayloadAction<Todo>) => action.payload,\n    clearTodo: () => null,\n  },\n});\n\nexport default selectedTodoSlice.reducer;\n\nexport const { setTodo, clearTodo } = selectedTodoSlice.actions;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { AppDispatch, RootState } from '.';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\nReturnType,\nRootState,\nunknown,\nAction<string>\n>;\n","import classNames from 'classnames';\nimport { setTodo } from '../../features/selectedTodo';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onMixTodos: (todos: Todo[]) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onMixTodos,\n}) => {\n  const dispatch = useAppDispatch();\n  const selelctedTodo = useAppSelector(state => state.selectedTodo);\n\n  const selectTodo = (todo: Todo) => {\n    dispatch(setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => onMixTodos(todos)}\n            >\n              Mix Todos\n            </button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              {\n                'has-background-info-light': todo.id === selelctedTodo?.id,\n              },\n            )}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {selelctedTodo?.id === todo.id ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectTodo(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              )\n                : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      selectTodo(todo);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport debounce from 'lodash.debounce';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './store/hooks';\nimport { loadTodos } from './store';\nimport { clearTodo } from './features/selectedTodo';\n\nenum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const { items: todos, loaded } = useAppSelector(state => state.todos);\n  const todoSelected = useAppSelector(state => state.selectedTodo);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [typeOfSelection, setTypeOfSelection] = useState<string>(FilterType.ALL);\n\n  const clearSelection = () => {\n    dispatch(clearTodo());\n  };\n\n  useEffect(() => {\n    dispatch(loadTodos());\n  }, []);\n\n  useEffect(() => {\n    switch (typeOfSelection) {\n      case FilterType.ALL:\n        setVisibleTodos(todos);\n        break;\n\n      case FilterType.ACTIVE:\n        setVisibleTodos(todos\n          .filter(todo => todo.completed === false));\n        break;\n\n      case FilterType.COMPLETED:\n        setVisibleTodos(todos.filter(todo => todo.completed === true));\n        break;\n\n      default:\n        break;\n    }\n\n    const lowQuery = appliedQuery.toLowerCase();\n\n    setVisibleTodos(currentTodos => currentTodos\n      .filter(todo => todo.title.toLowerCase().includes(lowQuery)));\n  }, [typeOfSelection, appliedQuery, todos]);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const handleInputQuery = (inputQuery: string) => {\n    setQuery(inputQuery);\n  };\n\n  const handleFilterType = (selectType: string) => {\n    setTypeOfSelection(selectType);\n  };\n\n  // const handleTodoSelect = (selectedTodo: Todo | null) => {\n  //   setTodoSelected(selectedTodo);\n  // };\n\n  const mixTodos = (todosVisible: Todo[]) => {\n    setVisibleTodos([...todosVisible].sort(() => Math.random() - 0.5));\n  };\n\n  const reset = () => setQuery('');\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onReset={reset}\n                onApplyQuery={applyQuery}\n                onHandleInputQuery={handleInputQuery}\n                onHandleFilterType={handleFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!loaded\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    onMixTodos={mixTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {todoSelected && (\n        <TodoModal\n          todo={todoSelected}\n          onClose={clearSelection}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo,\n  onClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n\n  useEffect(() => {\n    getUser(todo.userId).then(currentUser => {\n      setUser(currentUser);\n      setIsUserLoaded(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isUserLoaded\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => {\n                  setIsUserLoaded(false);\n                  onClose();\n                }}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\n\ntype State = {\n  loaded: boolean,\n  items: Todo[],\n};\n\nconst initialState: State = {\n  loaded: false,\n  items: [],\n};\n\ntype SetTodosAction = {\n  type: 'todos/set',\n  payload: Todo[],\n};\n\ntype StartTodosLoadingAction = {\n  type: 'todos/startLoading',\n};\n\ntype FinishTodosLoadingAction = {\n  type: 'todos/finishLoading',\n};\n\ntype Action = SetTodosAction\n| StartTodosLoadingAction | FinishTodosLoadingAction;\n\nconst todosReducer = (state = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'todos/set':\n      return {\n        ...state,\n        items: action.payload,\n      };\n\n    case 'todos/startLoading':\n      return {\n        ...state,\n        loaded: false,\n      };\n\n    case 'todos/finishLoading':\n      return {\n        ...state,\n        loaded: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const todosActions = {\n  setTodos: (todos: Todo[]): SetTodosAction => ({\n    type: 'todos/set',\n    payload: todos,\n  }),\n\n  startLoading: (): StartTodosLoadingAction => ({ type: 'todos/startLoading' }),\n  finishLoading: (): FinishTodosLoadingAction => ({\n    type: 'todos/finishLoading',\n  }),\n};\n\nexport default todosReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { getTodos } from '../api';\nimport selectedTodo from '../features/selectedTodo';\nimport todosReducer, { todosActions } from '../features/todos';\n\nexport const store = configureStore({\n  reducer: {\n    todos: todosReducer,\n    selectedTodo,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const loadTodos = () => {\n  return (dispatch: AppDispatch) => {\n    dispatch(todosActions.startLoading());\n    getTodos()\n      .then(todosFromServer => dispatch(todosActions.setTodos(todosFromServer)))\n      .finally(() => dispatch(todosActions.finishLoading()));\n  };\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { App } from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}